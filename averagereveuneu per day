##code


package retail

import org.apache.spark.SparkContext, org.apache.spark.SparkConf
import com.typesafe.config._
import org.apache.hadoop.fs._

object AvgRevenuedaily {
  def main(args : Array[String]) {
    val appConf = ConfigFactory.load()
    val conf = new SparkConf().setAppName("AVERAGE REVENUE Daily").
    setMaster(appConf.getConfig(args(2)).getString("deploymentMaster"))
    val sc = new SparkContext(conf)
    val inputpath = args(0)
    val outputpath = args(1)
    
    val fs = FileSystem.get(sc.hadoopConfiguration)
    val inputpathExists = fs.exists(new Path(inputpath))
    val outputpathExists = fs.exists(new Path(outputpath))
    
    if(!inputpathExists){
      println("Input path does not exists")
      return
    }
    if(outputpathExists){
      fs.delete(new Path(outputpath), true)
    }
    
    
    
  }
}









SCALA INTERPRETER

import org.apache.spark.SparkContext, org.apache.spark.SparkConf
val conf = new SparkConf().setAppName("AVERAGE REVENUE Daily").setMaster("local")
val sc = new SparkContext(conf)
val url = "/Users/jagadeeshyadav/data/retail_db"
val tablename = "orders"
val ordersRDD = sc.textFile(url + "/" + tablename)
ordersRDD.take(5).foreach(println)

val tablename2 = "order_items"
val orderItemsRDDD = sc.textFile(url + "/" + tablename2)

val orderscompleted = ordersRDD.filter(rec => (rec.split(",")(3) == "COMPLETE"))
orderscompleted.take(5).foreach(println)
val orders = orderscompleted.map(rec => (rec.split(",")(0).toInt, rec.split(",")(1)))
orders.take(5).foreach(println)
val orderItemsmap = orderItemsRDDD.map(rec => (rec.split(",")(1).toInt, rec.split(",")(4).toFloat))


orderscompleted.count()

orderItemsmap.take(5).foreach(println)
val orderItems = orderItemsmap.reduceByKey((acc, value) => acc + value)


## to find the aggregassion of a particular order Id ###

val filterRDD = orderItems.filter(rec => (rec._1 == 2))
filterRDD.foreach(println)

val ordersJoin = orders.join(orderItems)

####we can make speration of record as we want( , or : or |) ###

ordersJoin.take(5).foreach( rec => (println(rec._1 + ":" + rec._2._1 + ":" + rec._2._2)))























